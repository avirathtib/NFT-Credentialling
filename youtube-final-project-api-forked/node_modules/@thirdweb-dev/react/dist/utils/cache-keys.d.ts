import { MarketplaceFilter, QueryAllParams, SUPPORTED_CHAIN_ID } from "@thirdweb-dev/sdk";
import { QueryKey } from "react-query";
/**
 @internal
 */
export declare function createCacheKeyWithNetwork(input: QueryKey, chainId?: SUPPORTED_CHAIN_ID): QueryKey;
/**
 @internal
 */
export declare const cacheKeys: {
    readonly network: {
        readonly active: (chainId?: SUPPORTED_CHAIN_ID | undefined) => QueryKey;
    };
    readonly contract: {
        readonly type: (contractAddress?: string | undefined) => QueryKey;
        readonly publishMetadata: (contractAddress?: string | undefined) => QueryKey;
        readonly typeAndPublishMetadata: (contractAddress?: string | undefined) => QueryKey;
        readonly metadata: (contractAddress?: string | undefined) => QueryKey;
        readonly extractFunctions: (contractAddress?: string | undefined) => QueryKey;
        readonly nft: {
            readonly query: {
                readonly all: (contractAddress?: string | undefined, params?: QueryAllParams | undefined) => QueryKey;
                readonly totalSupply: (contractAddress?: string | undefined) => QueryKey;
            };
            readonly drop: {
                readonly getAllUnclaimed: (contractAddress?: string | undefined, params?: QueryAllParams | undefined) => QueryKey;
                readonly totalUnclaimedSupply: (contractAddress?: string | undefined) => QueryKey;
                readonly totalClaimedSupply: (contractAddress?: string | undefined) => QueryKey;
            };
        };
        readonly edition: {
            readonly query: {
                readonly all: (contractAddress?: string | undefined, params?: QueryAllParams | undefined) => QueryKey;
                readonly getTotalCount: (contractAddress: string | undefined) => QueryKey;
            };
        };
        readonly token: {
            readonly totalSupply: (contractAddress?: string | undefined) => QueryKey;
            readonly balanceOf: (contractAddress: string | undefined, walletAddress: string | undefined) => QueryKey;
        };
        readonly marketplace: {
            readonly getAllListings: (contractAddress?: string | undefined, params?: MarketplaceFilter | undefined) => QueryKey;
            readonly getActiveListings: (contractAddress?: string | undefined, params?: MarketplaceFilter | undefined) => QueryKey;
        };
    };
};
