import { EditionMintParams, RequiredParam } from "../../types";
import type { Erc1155, QueryAllParams } from "@thirdweb-dev/sdk";
import type { BigNumberish } from "ethers";
/** **********************/
/**     READ  HOOKS     **/
/** **********************/
/**
 * Use this to get a list of NFT tokens of your ERC1155 contract.
 *
 * @example
 * ```javascript
 * const { data: editions, isLoading, error } = useEditions(<YourERC1155Instance>, { start: 0, count: 100 });
 * ```
 *
 * @param contract - an instace of a contract that extends the ERC1155 spec (edition, edition drop, custom contract that follows the ERC1155 spec)
 * @param queryParams - query params to pass to the query for the sake of pagination
 * @returns a response object that includes an array of NFTs
 * @beta
 */
export declare function useEditions(contract: RequiredParam<Erc1155>, queryParams?: QueryAllParams): import("react-query").UseQueryResult<{
    metadata: {
        [x: string]: import("@thirdweb-dev/sdk").Json;
        name?: string | undefined;
        description?: string | undefined;
        image?: string | undefined;
        external_url?: string | undefined;
        animation_url?: string | undefined;
        uri: string;
        id: import("ethers").BigNumber;
    };
    supply: import("ethers").BigNumber;
}[], unknown>;
/**
 * Use this to get a the total (minted) supply of your ERC1155 contract.
 *
 * @example
 * ```javascript
 * const { data: totalCount, isLoading, error } = useEditionTotalCount(<YourERC1155Instance>);
 * ```
 *
 * @param contract - an instace of a contract that extends the ERC1155 spec (edition, edition drop, custom contract that follows the ERC1155 spec)
 * @returns a response object that incudes the total minted supply
 * @beta
 */
export declare function useEditionTotalCount(contract: RequiredParam<Erc1155>, tokenId: BigNumberish): import("react-query").UseQueryResult<import("ethers").BigNumber, unknown>;
/** **********************/
/**  READ HOOKS (drop)  **/
/** **********************/
/** **********************/
/**     WRITE HOOKS     **/
/** **********************/
/**
 * Use this to mint a new NFT on your ERC1155 contract
 *
 * @example
 * ```jsx
 * const Component = () => {
 *   const {
 *     mutate: mintEdition,
 *     isLoading,
 *     error,
 *   } = useMintEdition(">>YourERC1155ContractInstance<<");
 *
 *   if (error) {
 *     console.error("failed to mint nft", error);
 *   }
 *
 *   return (
 *     <button
 *       disabled={isLoading}
 *       onClick={() => mintEdition({ name: "My awesome NFT!" })}
 *     >
 *       Mint!
 *     </button>
 *   );
 * };
 * ```
 *
 * @param contract - an instace of a contract that extends the ERC1155 spec (nft collection, nft drop, custom contract that follows the ERC1155 spec)
 * @returns a mutation object that can be used to mint a new Edition token to the connected wallet
 * @beta
 */
export declare function useMintEdition(contract: RequiredParam<Erc1155>): import("react-query").UseMutationResult<import("@thirdweb-dev/sdk").TransactionResultWithId<{
    metadata: {
        [x: string]: import("@thirdweb-dev/sdk").Json;
        name?: string | undefined;
        description?: string | undefined;
        image?: string | undefined;
        external_url?: string | undefined;
        animation_url?: string | undefined;
        uri: string;
        id: import("ethers").BigNumber;
    };
    supply: import("ethers").BigNumber;
}>, unknown, EditionMintParams, unknown>;
